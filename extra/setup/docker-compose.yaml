version: '3.1'

networks:
  cas-net:
    external: false

services:
  maria-db:
    image: mariadb
    restart: always
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_DATABASE: foxcloud
      MYSQL_USER: foxcloud-api-user
      MYSQL_PASSWORD: Fti@123
      MYSQL_ROOT_PASSWORD: Fti@123
    ports:
      - 3306:3306

  #######################################################
  #             KONG
  ########################################################
#  kong-database:
#    image: caspostgres
#    environment:
#      POSTGRES_USERS: ${KONG_DB_USERNAME}:${KONG_DB_PASSWORD}|${KONGA_DB_USERNAME}:${KONGA_DB_PASSWORD}
#      POSTGRES_DATABASES: ${KONG_DB_NAME}:${KONG_DB_USERNAME}|${KONGA_DB_NAME}:${KONGA_DB_USERNAME}
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "konguser"]
#      interval: 30s
#      timeout: 30s
#      retries: 3
#    restart: on-failure
#    ports:
#      - 5432:5432
#    networks:
#      - ${CAS_NETWORK}
#    volumes:
#      - kong-db:/var/lib/postgresql/data
#
#  kong-migration:
#    image: kong:${KONG_VERSION}
#    depends_on:
#      - kong-database
#    environment:
#      KONG_DATABASE: ${KONG_DATABASE}
#      KONG_PG_HOST: ${KONG_DB_HOST}
#      KONG_PG_DATABASE: ${KONG_DB_NAME}
#      KONG_PG_USER: ${KONG_DB_USERNAME}
#      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
#    command: sh -c "sleep 10 && kong migrations bootstrap -v"
#    networks:
#      - ${CAS_NETWORK}
#    restart: on-failure
#
#  kong:
#    image: kong:${KONG_VERSION}
#    depends_on:
#      - kong-migration
#      - kong-database
#    environment:
#      KONG_DATABASE: ${KONG_DATABASE}
#      KONG_PG_HOST: ${KONG_DB_HOST}
#      KONG_PG_DATABASE: ${KONG_DB_NAME}
#      KONG_PG_USER: ${KONG_DB_USERNAME}
#      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD}
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
#      KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG}
#      KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG}
#      KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG}
#      KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG}
#    ports:
#      - ${KONG_PROXY_PORT}:8000
#      - 8001:8001
#      - ${KONG_PROXY_SSL_PORT}:8443
#    healthcheck:
#      test: ["CMD", "kong", "health"]
#      interval: 10s
#      timeout: 10s
#      retries: 10
#    restart: on-failure
#    networks:
#      - ${CAS_NETWORK}
#
#  kong-dashboard-migration:
#    image: pantsel/konga
#    depends_on:
#      - kong-database
#    environment:
#      TOKEN_SECRET: ${KONGA_TOKEN_SECRET}
#      DB_ADAPTER: ${KONG_DATABASE}
#      DB_HOST: ${KONGA_DB_HOST}
#      DB_PORT: ${KONGA_DB_PORT}
#      DB_DATABASE: ${KONGA_DB_NAME}
#      DB_USER: ${KONGA_DB_USERNAME}
#      DB_PASSWORD: ${KONGA_DB_PASSWORD}
#      NODE_ENV: ${KONGA_ENV}
#      KONGA_HOOK_TIMEOUT: 10000
#    command: -c prepare -a postgres -u postgresql://kongauser:kongapassword@kong-database:5432/db_konga
#    restart: on-failure
#    networks:
#      - ${CAS_NETWORK}
#
#  kong-dashboard:
#    image: pantsel/konga
#    depends_on:
#      - kong-database
#    environment:
#      TOKEN_SECRET: ${KONGA_TOKEN_SECRET}
#      DB_ADAPTER: ${KONG_DATABASE}
#      DB_HOST: ${KONGA_DB_HOST}
#      DB_PORT: ${KONGA_DB_PORT}
#      DB_DATABASE: ${KONGA_DB_NAME}
#      DB_USER: ${KONGA_DB_USERNAME}
#      DB_PASSWORD: ${KONGA_DB_PASSWORD}
#      NODE_ENV: ${KONGA_ENV}
#      KONGA_HOOK_TIMEOUT: 10000
#    restart: always
#    ports:
#      - ${KONGA_PORT}:1337
#    networks:
#      - ${CAS_NETWORK}

#######################################################
#             CONSUL - REGISTRATOR
########################################################
#  consul:
#    image: consul
#    command: "agent -server -bootstrap-expect=1 -client=0.0.0.0"
#    ports:
#      - 8500:8500
#    networks:
#      - ${CAS_NETWORK}
#    restart: on-failure
#
#  registrator:
#    image: gliderlabs/registrator:latest
#    command: "-cleanup -ip ${PRIVATE_IP} -resync 180 consul://${PRIVATE_IP}:8500"
#    depends_on:
#      - consul
#    volumes:
#      - /var/run/docker.sock:/tmp/docker.sock
#    networks:
#      - ${CAS_NETWORK}
#    restart: on-failure

#  cas-redis-master:
#    image: bitnami/redis:${CAS_REDIS_VERSION}
#    environment:
#      - REDIS_REPLICATION_MODE: master
#    volumes:
#      - cas-redis-data:/bitnami/redis/data
#    ports:
#      - ${REDIS_MASTER_PORT_NUMBER}:${REDIS_MASTER_PORT_NUMBER}
#    restart: unless-stopped
#    env_file:
#      - ./envs/redis.env

#  cas-redis-replica:
#    image: bitnami/redis:${CAS_REDIS_VERSION}
#    environment:
#      - REDIS_REPLICATION_MODE: slave
#      - REDIS_MASTER_HOST: cas-redis-master
#    ports:
#      - ${REDIS_MASTER_PORT_NUMBER}
#    depends_on:
#      - cas-redis-master
#    env_file:
#      - ./envs/redis.env
#    restart: always

volumes:
  kong-db:
    driver: local
  maria-db:
    driver: local
